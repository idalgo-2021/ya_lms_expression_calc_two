// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto_exchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalcManagerClient is the client API for CalcManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcManagerClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type calcManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcManagerClient(cc grpc.ClientConnInterface) CalcManagerClient {
	return &calcManagerClient{cc}
}

func (c *calcManagerClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/proto_exchange.CalcManager/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcManagerClient) Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/proto_exchange.CalcManager/Result", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcManagerServer is the server API for CalcManager service.
// All implementations must embed UnimplementedCalcManagerServer
// for forward compatibility
type CalcManagerServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	Result(context.Context, *ResultRequest) (*ResultResponse, error)
	mustEmbedUnimplementedCalcManagerServer()
}

// UnimplementedCalcManagerServer must be embedded to have forward compatible implementations.
type UnimplementedCalcManagerServer struct {
}

func (UnimplementedCalcManagerServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedCalcManagerServer) Result(context.Context, *ResultRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedCalcManagerServer) mustEmbedUnimplementedCalcManagerServer() {}

// UnsafeCalcManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcManagerServer will
// result in compilation errors.
type UnsafeCalcManagerServer interface {
	mustEmbedUnimplementedCalcManagerServer()
}

func RegisterCalcManagerServer(s grpc.ServiceRegistrar, srv CalcManagerServer) {
	s.RegisterService(&CalcManager_ServiceDesc, srv)
}

func _CalcManager_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcManagerServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_exchange.CalcManager/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcManagerServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcManager_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcManagerServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_exchange.CalcManager/Result",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcManagerServer).Result(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalcManager_ServiceDesc is the grpc.ServiceDesc for CalcManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalcManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_exchange.CalcManager",
	HandlerType: (*CalcManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _CalcManager_Echo_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _CalcManager_Result_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto_exchange/exchange.proto",
}

// CalcDaemonClient is the client API for CalcDaemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcDaemonClient interface {
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
}

type calcDaemonClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcDaemonClient(cc grpc.ClientConnInterface) CalcDaemonClient {
	return &calcDaemonClient{cc}
}

func (c *calcDaemonClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, "/proto_exchange.CalcDaemon/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcDaemonServer is the server API for CalcDaemon service.
// All implementations must embed UnimplementedCalcDaemonServer
// for forward compatibility
type CalcDaemonServer interface {
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	mustEmbedUnimplementedCalcDaemonServer()
}

// UnimplementedCalcDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedCalcDaemonServer struct {
}

func (UnimplementedCalcDaemonServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedCalcDaemonServer) mustEmbedUnimplementedCalcDaemonServer() {}

// UnsafeCalcDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcDaemonServer will
// result in compilation errors.
type UnsafeCalcDaemonServer interface {
	mustEmbedUnimplementedCalcDaemonServer()
}

func RegisterCalcDaemonServer(s grpc.ServiceRegistrar, srv CalcDaemonServer) {
	s.RegisterService(&CalcDaemon_ServiceDesc, srv)
}

func _CalcDaemon_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcDaemonServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_exchange.CalcDaemon/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcDaemonServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalcDaemon_ServiceDesc is the grpc.ServiceDesc for CalcDaemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalcDaemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_exchange.CalcDaemon",
	HandlerType: (*CalcDaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _CalcDaemon_AddTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto_exchange/exchange.proto",
}
