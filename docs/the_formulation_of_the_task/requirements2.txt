Распределённый калькулятор. Часть 2

Продолжаем работу над проектом Распределенный калькулятор.
В этой части работы над проектом реализуем персистентность (возможность программы восстанавливать свое состояние после перезагрузки) и многопользовательский режим.
Простыми словами: все, что мы делали до этого теперь будет работать в контексте пользователей, а все данные будут храниться в СУБД

Функционал:

1) Добавляем регистрацию пользователя
Пользователь отправляет запрос:

POST /api/v1/register {
	"login": ,
	"password":
}


В ответ получает 200+OK (в случае успеха). В противном случае - ошибка


2) Добавляем вход
Пользователь отправляет запрос:

POST /api/v1/login {
	"login": ,
	"password":
}

В ответ получает 200+OK и JWT токен для последующей авторизации.


Критерии выполнения задания:

1)Весь реализованный ранее функционал работает как раньше, только в контексте конкретного пользователя. За эту часть можно получить 20 баллов
2)У кого выражения хранились в памяти - переводим хранение в SQLite(теперь наша система обязана переживать перезагрузку). За эту часть можно получить 20 баллов
3)У кого общение вычислителя и сервера вычислений было реализовано с помощью HTTP - переводим взаимодействие на GRPC. За эту часть можно получить 10 баллов
4)Дополнительные баллы:
	- за покрытие проектам модульными тестами можно получить бонусные 10 баллов
	- за покрытие проектам интеграционными тестами можно получить бонусные 10 баллов
5)Правила оформления:
	- проект находится на GitHab - в ЛМС в решении вы сдаёте только ссылку на GitHab
	- к проекту прилагается файл с подробным описанием (как заупустить и проверить)
	- отдельным блоком идут подробно описанные тестовые сценарии
	- постарайтесь автоматизировать поднятие окружения для запуска вашей программы(чтобы можно было это сделать одной командой)